@page "/addproduct"
@inject NavigationManager NavigationManager
@inject UserService UserService
@using MongoDB.Bson;
@using MongoDB.Bson.Serialization.Attributes;
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env
@using System.IO
@using TireCompany.Data

<head>
    <link href="css/addproduct.css" rel="stylesheet" />
</head>
<div class="addproduct">
    <div class="addproduct_form">
        <h1>Добавить продукт</h1>
        <form>
            <div class="input_box">

                <input type="text" placeholder="Артикул" @bind-value="@article" />
                <input type="text" placeholder="Название" @bind-value="@title" />

                @if (Database.GetProductTypes().Count == 0)
                {
                    <p class="error">Продукты пока не добавлены</p>
                }
                else
                {
                    <select @bind="@productype">
                        <option value=null selected disabled hidden>Выберите продукт</option>

                        @foreach (ProductType pt in Database.GetProductTypes())
                        {
                            <option value="@pt._id">@pt.Title</option>
                        }

                    </select>}

                <InputFile OnChange="@LoadFiles" />
                <input type="number" placeholder="Количество людей" @bind-value="@peoples" />
                <input type="number" placeholder="Номер цеха" @bind-value="@workshop" />
                <input type="number" placeholder="Цена" @bind-value="@price" />
                <textarea placeholder="Описание" @bind="@description" />

                @foreach (var item in sm)
                {
                    <div class="new_material">
                        <EditForm Model="item">
                            <InputSelect @bind-Value="item.Material" class="material_title">
                                <option value=null selected disabled hidden>Выберите материал</option>

                                @foreach (Material m in Database.GetMaterials())
                                    {
                                    <option value="@m._id">@m.Title</option>
                                    }
                                /**/



                            </InputSelect>
                        </EditForm>
                        <input type="number" class="material_count" placeholder="Количество" @bind-value="@item.Count" />
                        <img src="/images/remove.png" class="material_delete" @onclick="(() => DeleteMaterial(item))" />
                    </div>
                }
                @if (error != null)
                {
                    <p class="error">@error</p>
                }
                <a class="btn_addmaterial" @onclick="AddMaterial">Материал</a>
                <a class="btn_addproduct" @onclick="Add">Добавить</a>


            </div>
        </form>
    </div>
</div>
@code{
    private string error = null;

    private int currentmaterialcount = 0;
    private string article;
    private string title;

    public class StringMaterial
    {
        public string Material { get; set; }
        public int Count { get; set; }
    }

    List<StringMaterial> sm = new List<StringMaterial>() { };

    private string selected = null!;


    private string productype;
    private string material;
    private int? peoples = null;
    private int? workshop = null;
    private double? price = null;
    private string description;
    private bool isLoading;
    private List<IBrowserFile> loadedFiles = new();

    int countFiles = 1;
    private void LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFiles.Clear();
        isLoading = true;
        foreach (var file in e.GetMultipleFiles(countFiles))
        {
            loadedFiles.Add(file);
        }
        isLoading = false;
    }
    List<MaterialCount> mc = new List<MaterialCount>() { };
     IBrowserFile file;
        string path;
    private async Task Add()
    {
        error = null;
        List<string> objids = new List<string>();
        if (article == "" || title == "" || productype == null || peoples == null || workshop == null|| price==null|| description == "")
        { error = "Не все поля заполнены"; };
        if (Database.FindProductByArticle(article) != null)
        {
            error = "Этот артикул уже занят";
        };
        if (sm.Count == 0)
        {
            error = "Вы не добавили материалы";
        };
        if (price <= 0)
        {
            error = "Цена не может быть отрицательной или равной 0";
        }

        if (peoples <= 0)
        {
            error = "Неверное количество людей";
        }
        if (workshop <= 0)
        {
            error = "Неверный номер цеха";
        }
        foreach (var item in sm)
        {
            if (item.Count<=0)
            {
                error = "Количество материала не может быть 0 и меньше";
                break;

            }
            if (item.Material == null)
            {
                error = "Заполните название материала";
                break;
            };
            if (!objids.Contains(item.Material))
            {
                objids.Add(item.Material);

            }
            else
            {
                error = "Два одинаковых материала";
                break;
            }

        }
       
        if (loadedFiles.Count != 0)
        {
            file = loadedFiles[0];
            path = Path.Combine("wwwroot", "uploads", file.Name);
            using (FileStream fs = new(path, FileMode.Create))
            {
                await file.OpenReadStream(1000000000).CopyToAsync(fs);
            }
        }
        else
        {
            error = "Фотография не загружена";
            
        }
        if (error == null)
        {
          
            
            mc = sm.Select(x => new MaterialCount(ObjectId.Parse(x.Material), x.Count)).ToList();
            Database.AddProduct(new Product(article, title, ObjectId.Parse(productype), path, peoples.Value, workshop.Value, price.Value, description, mc));
            NavigationManager.NavigateTo("/mainpage");
        }
    }
    private void AddMaterial()
    {

        currentmaterialcount++;
        sm.Add(new StringMaterial());

    }
    private void DeleteMaterial(StringMaterial item)
    {

        currentmaterialcount--;
        sm.Remove(item);

    }

}